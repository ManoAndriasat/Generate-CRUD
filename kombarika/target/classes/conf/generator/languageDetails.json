{
    "languages" : {
        "csharp" : {
            "name" : "dotnet",
            "importSyntax":"using",
            "packageSyntax":"namespace",
            "openBracket":"{",
            "closeBracket":"}",
            "classSyntax":"public class",
            "fieldSyntax":"Type field { get; set; }",
            "listSyntax" : "IEnumerable<?>",
            "endOfInstruction":";",
            "annotationSyntax":"[?]",
            "constructorSyntax": "public ?(){}",
            "methodSyntax": "public #type# #name#(#arg#){\n #body#\n}",
            "encapsulation":"",
            "extension":"cs",
            "frameworks" : {
                "dotnet" : {
                    "template" : "Template.code",
                    "repository": "Template.code",
                    "imports": {
                        "controller":[
                            "System.Diagnostics",
                            "Microsoft.AspNetCore.Mvc",
                            "packageName.classNameContext",
                            "entity.className"
                        ],
                        "entity":[
                            "System.ComponentModel.DataAnnotations",
                            "System.ComponentModel.DataAnnotations.Schema"
                        ],
                        "repository":[
                            "packageName.className",
                            "using Microsoft.EntityFrameworkCore"
                        ]
                    },
                    "annotationProperty" : {
                        "table":"Table(name = \"?\")",
                        "autoIncrement":"",
                        "column":"Column(name = \"?\")",
                        "entity": "",
                        "controller": "ApiController",
                        "constraints":{
                            "primaryKey":"Id",
                            "foreignKey":{
                                "annotation":"Foreignkey(\"?\")",
                                "manyToOne":"",
                                "manyToMany":"",
                                "oneToMany":"",
                                "oneToOne":""
                            }
                        }
                    },
                    "crudMethod" : {
                        "findAll": "return Ok(_context.#object#.ToList());",
                        "findById":"",
                        "delete": "_context.MyItems.Remove(#object#);\n_context.SaveChanges();\nreturn Ok();",
                        "update": "var temp = #object#;\n_context.SaveChanges();\nreturn Ok();",
                        "save": "_context.MyItems.Add(value);\n_context.SaveChanges();\nreturn Ok();"
                    },
                    "controllerProperty" : {
                        "path": "Route('[?]')",
                        "get": "HttpGet",
                        "post": "HttpPost",
                        "put": "HttpPut",
                        "delete": "HttpDelete",
                        "returnType": "ActionResult<?>",
                        "field": "private readonly Ilogger<?Controller> _logger;",
                        "annotationField": "",
                        "annotationMethodParameter":"",
                        "annotationArgumentParameterFormData":"FromBody",
                        "annotationArgumentParameterLink":"",
                        "constructor": "\tpublic #name#Controller(#name#DbContext context) { _context = context; }"
                    },
                    "repositoryProperty" : {
                        "name":"DbContext",
                        "classSyntax": "public class ?Controller : DbContext",
                        "fieldSyntax": "\tpublic DbSet<#Field#> #Field# { get; set; }"
                    }
                }
            }
        },
        "java" : {
            "name" : "java",
            "importSyntax":"import",
            "packageSyntax":"package",
            "classSyntax":"public class",
            "fieldSyntax":"Type field;",
            "openBracket":"{",
            "closeBracket":"}",
            "endOfInstruction":";",
            "annotationSyntax":"@?",
            "listSyntax" : "Iterable<?>",
            "constructorSyntax": "public ?(){}",
            "methodSyntax": "public #type# #name#(#arg#){\n #body#\n}",
            "encapsulation":"\tpublic #type# get#Field#(){\nreturn this.#field#;\n\t}\n\tpublic void set#Field#(#type# #field#){\nthis.#field# = #field#;\n\t}\n",
            "extension":"java",
            "frameworks": {
                "spring-boot" : {
                    "template" : "Template.code",
                    "repository": "Template.code",
                    "imports" : {
                        "controller":[
                            "packageName.classNameRepository",
                            "entity.className",
                            "org.springframework.http.*",
                            "org.springframework.beans.factory.annotation.Autowired",
                            "org.springframework.web.bind.annotation.*"
                        ],
                        "entity":[
                            "jakarta.persistence.*"
                        ],
                        "repository":[
                            "packageName.className",
                            "org.springframework.data.repository.CrudRepository",
                            "org.springframework.data.jpa.repository.Query"
                        ]
                    },
                    "importsControllerRest" : {
                        "controllerRest":[
                            "packageName.classNameRepository",
                            "entity.className",
                            "org.springframework.http.*",
                            "org.springframework.beans.factory.annotation.Autowired",
                            "org.springframework.web.bind.annotation.*",
                            "java.util.*",
                            "java.sql.*"
                        ],
                        "entity":[
                            "jakarta.persistence.*"
                        ],
                        "repository":[
                            "packageName.className",
                            "org.springframework.data.repository.CrudRepository",
                            "org.springframework.data.jpa.repository.Query"
                        ]
                    },
                    "annotationProperty" : {
                        "table": "Table(name = \"?\")",
                        "autoIncrement":"GeneratedValue(strategy=GenerationType.IDENTITY)",
                        "column": "Column(name = \"?\")",
                        "entity": "Entity",
                        "controller": "RestController\n@CrossOrigin(\"*\")",
                        "constraints": {
                            "primaryKey": "Id",
                            "foreignKey": {
                                "annotation":"JoinColumn(name = \"?\")",
                                "manyToOne":"ManyToOne",
                                "manyToMany":"",
                                "oneToMany":"",
                                "oneToOne":""
                            }
                        }
                    },
                    "annotationPropertyControllerRest" : {
                        "table": "Table(name = \"?\")",
                        "autoIncrement":"GeneratedValue(strategy=GenerationType.IDENTITY)",
                        "column": "Column(name = \"?\")",
                        "entity": "Entity",
                        "controllerRest": "RestController\n@CrossOrigin(\"*\")",
                        "constraints": {
                            "primaryKey": "Id",
                            "foreignKey": {
                                "annotation":"JoinColumn(name = \"?\")",
                                "manyToOne":"ManyToOne",
                                "manyToMany":"",
                                "oneToMany":"",
                                "oneToOne":""
                            }
                        }
                    },
                    "crudMethod" : {
                        "findAll": "return ResponseEntity.ok(repository.findAll());",
                        "findById":"return ResponseEntity.ok(repository.findById(#Id#));",
                        "delete": "repository.delete(#object#);",
                        "update": "return ResponseEntity.ok(repository.save(#object#));",
                        "save": "return ResponseEntity.ok(repository.save(#object#));"
                    },
                    "crudMethodRestController" : {
                        "findAll": "Map<String, Object> resultat = new HashMap<>();\n\tint status = 0;\n\tString titre = null;\n\tString message = null;\n\tResponseEntity<Iterable<#type#>> classNameResult = null;\n\ttry {\n\t\tclassNameResult = ResponseEntity.ok(repository.findAll());\n\n\t\tstatus = 200;\n\t\ttitre = \" Prendre tout les classNames reussi\";\n\t\tmessage = \"Excellent , vous avez prend tout les classNames \";\n\t} catch (Exception e) {\n\t\tstatus = 500;\n\t\ttitre = \"Prendre tout les classNames a echouer \";\n\t\tmessage = e.getMessage();\n\t} finally {\n\t\tresultat.put(\"data\", classNameResult);\n\t\tresultat.put(\"status\", status);\n\t\tresultat.put(\"titre\", titre);\n\t\tresultat.put(\"message\", message);\n\t}\nreturn resultat;",
                        "findById": "Map<String, Object> resultat = new HashMap<>();\n\tint status = 0;\n\tString titre = null;\n\tString message = null;\n\tMap<String, Object> donnes = new HashMap<>();\n\ttry {\n\t\tResponseEntity.ok(repository.findById(id));\n\n\t\tstatus = 200;\n\t\ttitre = \" Prendre un className reussi\";\n\t\tmessage = \"Excellent , vous avez prend le className Id \"+id;\n\t} catch (Exception e) {\n\t\tstatus = 500;\n\t\ttitre = \"Prendre le className a echouer \";\n\t\tmessage = e.getMessage();\n\t} finally {\n\t\tresultat.put(\"status\", status);\n\t\tresultat.put(\"titre\", titre);\n\t\tresultat.put(\"message\", message);\n\t}\nreturn resultat;",
                        "delete": "Map<String, Object> resultat = new HashMap<>();\n\tint status = 0;\n\tString titre = null;\n\tString message = null;\n\tMap<String, Object> donnes = new HashMap<>();\n\ttry {\n\t\tclassName.setId(id);  \n\t\trepository.delete(className);\n\n\t\tstatus = 200;\n\t\ttitre = \" Suppression  de className reussi\";\n\t\tmessage = \"Excellent , vous avez supprimer className Id \"+id;\n\t} catch (Exception e) {\n\t\tstatus = 500;\n\t\ttitre = \"Suppression de className a echouer \";\n\t\tmessage = e.getMessage();\n\t} finally {\n\t\tresultat.put(\"data\", className);\n\t\tresultat.put(\"status\", status);\n\t\tresultat.put(\"titre\", titre);\n\t\tresultat.put(\"message\", message);\n\t}\nreturn resultat;",
                        "save": "Map<String, Object> resultat = new HashMap<>();\n\tint status = 0;\n\tString titre = null;\n\tString message = null;\n\tMap<String, Object> donnes = new HashMap<>();\n\ttry {\n\t\tResponseEntity.ok(repository.save(className));\n\n\t\tstatus = 200;\n\t\ttitre = \" Creation de className reussi\";\n\t\tmessage = \"Excellent , vous avez creer un autre className \";\n\t} catch (Exception e) {\n\t\tstatus = 500;\n\t\ttitre = \"Creation de className a echouer \";\n\t\tmessage = e.getMessage();\n\t} finally {\n\t\tresultat.put(\"data\", className);\n\t\tresultat.put(\"status\", status);\n\t\tresultat.put(\"titre\", titre);\n\t\tresultat.put(\"message\", message);\n\t}\nreturn resultat;",
                        "update": "Map<String, Object> resultat = new HashMap<>();\n\tint status = 0;\n\tString titre = null;\n\tString message = null;\n\tMap<String, Object> donnes = new HashMap<>();\n\ttry {\n\t\tclassName.setId(id);  \n\t\tResponseEntity.ok(repository.save(className));\n\n\t\tstatus = 200;\n\t\ttitre = \" Modification  de className reussi\";\n\t\tmessage = \"Excellent , vous avez modifier className Id \"+id;\n\t} catch (Exception e) {\n\t\tstatus = 500;\n\t\ttitre = \"Modification de className a echouer \";\n\t\tmessage = e.getMessage();\n\t} finally {\n\t\tresultat.put(\"data\", className);\n\t\tresultat.put(\"status\", status);\n\t\tresultat.put(\"titre\", titre);\n\t\tresultat.put(\"message\", message);\n\t}\nreturn resultat;"
                    },
                    "controllerProperty" : {
                        "path": "RequestMapping(path = \"?\")",
                        "get": "GetMapping()",
                        "post": "PostMapping()",
                        "put": "PutMapping()",
                        "delete": "DeleteMapping()",
                        "field": "private ?Repository repository;",
                        "returnType": "ResponseEntity<?>",
                        "annotationField": "Autowired",
                        "annotationMethodParameter":"",
                        "annotationArgumentParameterFormData":"RequestBody",
                        "annotationArgumentParameterLink":"PathVariable",
                        "constructor": ""
                    },
                    "controllerRestProperty" : {
                        "get": "GetMapping(className)",
                        "post": "PostMapping(className)",
                        "findById": "GetMapping(classNameWithId)",
                        "put": "PutMapping(classNameWithId)",
                        "delete": "DeleteMapping(classNameWithId)",
                        "field": "private ?Repository repository;",
                        "returnType": "Map<String, Object>",
                        "annotationField": "Autowired",
                        "annotationMethodParameter":"",
                        "annotationArgumentParameterFormData":"RequestBody",
                        "annotationArgumentParameterLink":"PathVariable",
                        "constructor": ""
                    },
                    "repositoryProperty" : {
                        "name":"Repository",
                        "classSyntax": "public interface ?Repository extends CrudRepository<?, #type#>",
                        "fieldSyntax": ""
                    }

                }
            }
        }
    }
}
