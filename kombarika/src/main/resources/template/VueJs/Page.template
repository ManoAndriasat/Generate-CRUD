<template>
    <SideBar />
    <div class="container" style="margin-left:350px;">
        <div class="row">
            <div class="col">
                <button style="margin-top: 70px;" type="button" class="ajoute btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
                    Ajouter
                </button>
                
                <input type="file" @change="handleFileUpload">
                <button @click="convertCSVtoJSON">Upload CSV</button>
                
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            #column-title# 
                            <th scope="col">Action</th>
                            <th>mofifier</th>
                            <th>details</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(item, index) in liste" :key="index" @click="selectItem(item)">
                            <th scope="row">{{ index + 1 }}</th>
                             #column-row# 
                            <td>
                                <button type="button" data-bs-toggle="modal" data-bs-target="#editModal"
                                    class="btn btn-primary btn-sm">Modifier</button>
                            </td>
                            <td>
                                <button class="btn btn-danger btn-sm" data-bs-toggle="modal"
                                    data-bs-target="#deleteModal">Supprimer</button>
                            </td>
                            <td>
                                <button class="btn details" data-bs-toggle="modal"
                                    data-bs-target="#detailsModal">details ...</button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="container p-5">
        <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Ajouter</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form @submit.prevent="submitForm">
                            
                            #column-add#
                            <button type="submit" class="btn btn-primary">Ajouter</button>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-warning" data-bs-dismiss="modal">Fermer</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Modifier</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form @submit.prevent="submitForm">
                        #column-edit#
                        <button type="submit" class="btn btn-primary" style="width: ;: =100%;">Modifier</button>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-warning" data-bs-dismiss="modal">Fermer</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" style="padding: 30px;">
                <table>
                    <tr v-for="(value, key) in selectedItem" :key="key">
                        <td class="details-td details-titre">{{ key }}</td>
                        <td class="details-td">{{ value }}</td>
                    </tr>
                </table>
                <button style="margin-top: 20px;" type="button" class="btn btn-primary" data-bs-dismiss="modal">Fermer</button>
            </div>
        </div>
    </div>

    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Supprimer</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <center>
                    <p style="padding: 20px 0px;">etes vous sure de vouloir supprimer cet element ?</p>
                </center>
                <button @click="deleteElement()" class="btn-choice btn btn-primary">oui</button>
                <button type="button" class="btn-choice btn btn-danger" data-bs-dismiss="modal">non</button>
            </div>
        </div>
    </div>
</template>

<script>
import SideBar from "./SideBar.vue"
import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap/dist/js/bootstrap.min.js";

export default {
    name: "#table#",
    components:{
        SideBar
    },
    data() {
        return {
            #column#
            #ListeFK#
            liste: [],
            csvData: null,
            jsonData: null,
            selectedItem: {},
            #selectedFK#
        };
    },
    mounted() {
        this.findAll();
        #mounted-api-FK#
    },
    methods: {
        #api-FK#
        async findAll() {
            try {
                const response = await fetch('#API#/#table#s');
                if (!response.ok) {
                    throw new Error('Erreur de réseau');
                }
                this.liste = await response.json();
                this.liste = this.liste.data.body;
            } catch (error) {
                console.error('Erreur lors de la récupération de l\'élément:', error);
            }
        },
        handleFileUpload(event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = () => {
                this.csvData = reader.result;
            };
            reader.readAsText(file);
        },
        convertCSVtoJSON() {
            if (!this.csvData) {
                alert('Veuillez d\'abord importer un fichier CSV.');
                return;
            }

            const lines = this.csvData.split('\n');
            const headers = lines[0].trim().split(';');
            const output = [];

            for (let i = 1; i < lines.length; i++) {
                const obj = {};
                const currentLine = lines[i].trim().split(';');

                for (let j = 0; j < headers.length; j++) {
                obj[headers[j]] = currentLine[j];
                }

                output.push(obj);
            }

            this.jsonData = output;
            this.addElementCsv();
        },
        async addElementCsv() {
            if (!this.jsonData) {
                alert('Veuillez d\'abord convertir le CSV en JSON.');
                return;
            }
            const jsonData = JSON.parse(this.jsonData);

            for (const data of jsonData) {
                #csv-column#
                await this.addElement();
            }
            alert('Tous les éléments du CSV ont été insérés avec succès.');
        }
        async addElement() {
            try {
                const response = await fetch('#API#/#table#', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        #api-add-column#
                    })
                });
                if (!response.ok) {
                    throw new Error('Erreur lors de l\'ajout de l\'élément');
                }
                this.findAll();
            } catch (error) {
                console.error('Erreur lors de l\'ajout de l\'élément:', error);
            }
        },
        async updateElement() {
            try {
                const response = await fetch(`#API#/#table#/${this.selectedItem.id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        #api-update-column#
                    })
                });
                if (!response.ok) {
                    throw new Error('Erreur lors de la modification de l\'élément');
                }
                this.findAll();
            } catch (error) {
                console.error('Erreur lors de la modification de l\'élément:', error);
            }
        },
        async deleteElement() {
            try {
                const response = await fetch(`#API#/#table#/${this.selectedItem.id}`, {
                    method: 'DELETE'
                });
                if (!response.ok) {
                    throw new Error('Erreur lors de la suppression de l\'élément');
                }
                this.findAll();
            } catch (error) {
                console.error('Erreur lors de la suppression de l\'élément:', error);
            }
        },
        submitForm() {
            if (this.selectedItem.id) {
                this.updateElement();
            } else {
                this.addElement();
            }
        },
        selectItem(item) {
            this.selectedItem = item;
        },
        #selectedFKFunction#
    }
};
</script>

<style>
.ajoute {
    height: 100px;
    width: 100px;
    margin-bottom: 20px;
}

.btn-choice {
    border-radius: 0px;
}
.details-td{
    border-bottom:1px solid rgb(194, 194, 194);
    height: 50px;
}
.details-titre{
    font-weight: 700;
}
.details{
    font-size: 16px;
    color: rgb(9, 9, 9);
    text-decoration: underline;
    background-color: transparent;
}
.modal-header{
    background-color: #37474F;
    color: white;
}
</style>